/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => tlfFileInfo
});
var import_obsidian3 = __toModule(require("obsidian"));

// tlfConstants.ts
var VIEW_TYPE = "tlfItemView";
var INTERVAL_MINUTES = 0.3;
var MATCH_HTML_COMMENT = new RegExp("<!--[\\s\\S]*?(?:-->)?<!---+>?|<!(?![dD][oO][cC][tT][yY][pP][eE]|\\[CDATA\\[)[^>]*>?|<[?][^>]*>?", "g");
var MATCH_COMMENT = new RegExp("%%[^%%]+%%", "g");
var COMMON_ENGLISH_WORDS = "(\\ba\\b)|(\\babout\\b)|(\\bafter\\b)|(\\ball\\b)|(\\balso\\b)|(\\ban\\b)|(\\band\\b)|(\\bany\\b)|(\\bas\\b)|(\\bat\\b)|(\\bback\\b)|(\\bbe\\b)|(\\bbecause\\b)|(\\bbut\\b)|(\\bby\\b)|(\\bcan\\b)|(\\bcome\\b)|(\\bcould\\b)|(\\bday\\b)|(\\bdo\\b)|(\\beven\\b)|(\\bfirst\\b)|(\\bfor\\b)|(\\bfrom\\b)|(\\bget\\b)|(\\bgive\\b)|(\\bgo\\b)|(\\bgood\\b)|(\\bhave\\b)|(\\bhe\\b)|(\\bher\\b)|(\\bhim\\b)|(\\bhis\\b)|(\\bhow\\b)|(\\bi\\b)|(\\bif\\b)|(\\bin\\b)|(\\binto\\b)|(\\bit\\b)|(\\bits\\b)|(\\bjust\\b)|(\\bknow\\b)|(\\blike\\b)|(\\blook\\b)|(\\bmake\\b)|(\\bme\\b)|(\\bmost\\b)|(\\bmy\\b)|(\\bnew\\b)|(\\bno\\b)|(\\bnot\\b)|(\\bnow\\b)|(\\bof\\b)|(\\bon\\b)|(\\bone\\b)|(\\bonly\\b)|(\\bor\\b)|(\\bother\\b)|(\\bour\\b)|(\\bout\\b)|(\\bover\\b)|(\\bpeople\\b)|(\\bsay\\b)|(\\bsee\\b)|(\\bshe\\b)|(\\bso\\b)|(\\bsome\\b)|(\\btake\\b)|(\\bthan\\b)|(\\bthat\\b)|(\\bthe\\b)|(\\btheir\\b)|(\\bthem\\b)|(\\bthen\\b)|(\\bthere\\b)|(\\bthese\\b)|(\\bthey\\b)|(\\bthink\\b)|(\\bthis\\b)|(\\btime\\b)|(\\bto\\b)|(\\btwo\\b)|(\\bup\\b)|(\\bus\\b)|(\\buse\\b)|(\\bwant\\b)|(\\bway\\b)|(\\bwe\\b)|(\\bwell\\b)|(\\bwhat\\b)|(\\bwhen\\b)|(\\bwhich\\b)|(\\bwho\\b)|(\\bwill\\b)|(\\bwith\\b)|(\\bwork\\b)|(\\bwould\\b)|(\\byear\\b)|(\\byou\\b)|(\\byour\\b)";

// stats.ts
function getWordCount(text) {
  const spaceDelimitedChars = /A-Za-z\u0027\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source;
  const nonSpaceDelimitedWords = /\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5/.source;
  const nonSpaceDelimitedWordsOther = /[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source;
  const pattern = new RegExp([
    `(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-${spaceDelimitedChars}])+`,
    nonSpaceDelimitedWords,
    nonSpaceDelimitedWordsOther
  ].join("|"), "g");
  return (text.match(pattern) || []).length;
}
function getCharacterCount(text) {
  return text.length;
}
function getSentenceCount(text) {
  const sentences = ((text || "").match(/[^.!?\s][^.!?]*(?:[.!?](?!['"]?\s|$)[^.!?]*)*[.!?]?['"]?(?=\s|$)/gm) || []).length;
  return sentences;
}
function getParagraphCount(text) {
  var paragraphs = ((text || "").match(/^(.)+(\n)/gm) || []).length;
  const lastCharacter = (text || "").slice(-1);
  if (lastCharacter != "\n" && lastCharacter != "\r") {
    paragraphs++;
  }
  return paragraphs;
}
function getWordFrequencyArray(text) {
  const spaceDelimitedChars = /A-Za-z\u0027\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2019\u2032\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source;
  const nonSpaceDelimitedWords = /\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5/.source;
  const nonSpaceDelimitedWordsOther = /[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source;
  const pattern = new RegExp([
    `(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-${spaceDelimitedChars}])+`,
    nonSpaceDelimitedWords,
    nonSpaceDelimitedWordsOther
  ].join("|"), "g");
  var array = text.match(pattern) || [];
  for (var i in array) {
    array[i] = String(array[i]).toLowerCase();
  }
  var keyValue = array.reduce(function(acc, curr) {
    return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc;
  }, {});
  var wordFrequencyArray = [];
  for (var key in keyValue) {
    wordFrequencyArray.push([key, keyValue[key]]);
  }
  wordFrequencyArray.sort(function(a, b) {
    if (a[1] > b[1]) {
      return -1;
    } else if (a[1] < b[1]) {
      return 1;
    } else {
      if (a[0] < b[0]) {
        return -1;
      } else if (a[0] > b[0]) {
        return 1;
      }
    }
    return 0;
  });
  return wordFrequencyArray;
}

// tlfPluginSettingTab.ts
var import_obsidian = __toModule(require("obsidian"));
var tlfDefaultSettings = Object.freeze({
  showCreated: true,
  showModified: true,
  showFile: true,
  showFolder: true,
  showSize: true,
  showCurrentWords: true,
  showCurrentCharacters: true,
  showCurrentSentences: true,
  showCurrentParagraphs: true,
  showCurrentPages: true,
  wordsPerPage: 300,
  showSelectedWords: true,
  showSelectedCharacters: true,
  showSelectedSentences: true,
  showSelectedParagraphs: true,
  showWordFrequency: true,
  filterFrequency: true,
  filterRegex: COMMON_ENGLISH_WORDS
});
var tlfPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "File Info Panel Settings" });
    containerEl.createEl("h4", { text: "File Information" });
    new import_obsidian.Setting(containerEl).setName("Show Date Created").setDesc("Show the date created for the active document.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showCreated);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showCreated = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Date Modified").setDesc("Show the date modified for the active document.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showModified);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showModified = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show File Size").setDesc("Show the file size for the active document.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showSize);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showSize = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show File").setDesc("Show a link to open the active document in its default application.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showFile);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showFile = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Folder").setDesc("Show a link to open the folder that contains the active document.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showFolder);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showFolder = value;
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h4", { text: "Document Statistics" });
    containerEl.createEl("p", { text: "The following settings only work for the currently open document and only for md and txt files. Toggle the File Info Panel visibility if you change these settings." });
    new import_obsidian.Setting(containerEl).setName("Show Character Count").setDesc("Show the document's character count.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showCurrentCharacters);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showCurrentCharacters = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Word Count").setDesc("Show the document's word count.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showCurrentWords);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showCurrentWords = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Sentence Count").setDesc("Show the document's sentence count.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showCurrentSentences);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showCurrentSentences = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Paragraph Count").setDesc("Show the document's paragraph count. This does not count empty lines.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showCurrentParagraphs);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showCurrentParagraphs = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Page Count Estimate").setDesc("Show the document's page count, based on the words per page setting.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showCurrentPages);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showCurrentPages = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Words Per Page").setDesc("Enter a Number. How many words do you average per page?").addText((cb) => {
      cb.inputEl.setAttribute("type", "number");
      cb.setPlaceholder("300");
      cb.setValue(this.plugin.settings.wordsPerPage);
      cb.onChange((value) => {
        this.plugin.settings.wordsPerPage = value;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "Document Word Frequency" });
    containerEl.createEl("p", { text: "The following settings only work for the currently open document and only for md and txt files. The extra calculations may affect Obsidian's performance, depending on the size of your documents and your system. Toggle the File Info Panel visibility if you change these settings." });
    new import_obsidian.Setting(containerEl).setName("Show a Word Frequency Report").setDesc("Show a grid of words you use by frequency.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showWordFrequency);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showWordFrequency = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Filter Word Frequency Report").setDesc("Filter (separate) the word frequency report using the following Regex.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.filterFrequency);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.filterFrequency = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Filter Regex").setDesc(createFragment((frag) => {
      frag.appendText("Regex. Do not include the outside /'s.");
      frag.createEl("br");
      frag.appendText("For filter regex help and examples, see: ");
      frag.createEl("br");
      frag.createEl("a", { text: "https://cattail.nu/obsidian/filePluginRegexHelper.html", href: "https://cattail.nu/obsidian/filePluginRegexHelper.html" });
    })).addText((cb) => {
      cb.setPlaceholder(COMMON_ENGLISH_WORDS);
      cb.setValue(this.plugin.settings.filterRegex);
      cb.onChange((value) => {
        this.plugin.settings.filterRegex = value;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "Document Selected Text Statistics" });
    containerEl.createEl("p", { text: "Selected statistics update every " + INTERVAL_MINUTES + " minutes. Don't leave these on unless you are using it." });
    containerEl.createEl("p", { text: "The following settings only work for the currently open document and only for md and txt files. The extra calculations may affect Obsidian's performance, depending on the size of your documents and your system. Toggle the File Info Panel visibility if you change these settings." });
    new import_obsidian.Setting(containerEl).setName("Show Selected Character Count").setDesc("Show the document's selected text's character count.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showSelectedCharacters);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showSelectedCharacters = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Selected Word Count").setDesc("Show the document's selected text's word count.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showSelectedWords);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showSelectedWords = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Selected Sentence Count").setDesc("Show the document's selected text's sentence count.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showSelectedSentences);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showSelectedSentences = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show Selected Paragraph Count").setDesc("Show the document's selected text's paragraph count. This does not count empty lines.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.showSelectedParagraphs);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showSelectedParagraphs = value;
        yield this.plugin.saveSettings();
      }));
    });
  }
};

// tlfItemView.ts
var import_obsidian2 = __toModule(require("obsidian"));
var tlfItemView = class extends import_obsidian2.ItemView {
  constructor(leaf, app2, plugin) {
    super(leaf, app2, plugin);
    this.isText = 0;
    this.strCreated = "";
    this.strCreatedFromNow = "";
    this.strModified = "";
    this.strModifiedFromNow = "";
    this.strFile = "";
    this.strFolder = "";
    this.strSize = "";
    this.strFullPath = "";
    this.numWords = 0;
    this.numCharacters = 0;
    this.numSentences = 0;
    this.numParagraphs = 0;
    this.arrCurrentWordFrequency = [];
    this.numSelectedWords = 0;
    this.numSelectCharacters = 0;
    this.numSelectedSentences = 0;
    this.numSelectedParagraphs = 0;
    this.plugin = plugin;
  }
  updateDisplay() {
    const container = this.containerEl.children[1];
    container.empty();
    if (this.plugin.settings.showFile) {
      const tlfTable2 = container.createEl("div", { cls: "tlfFileInfoTable" });
      const row5 = tlfTable2.createEl("div", { cls: "tlfFileInfoRow" });
      const cell5 = row5.createEl("div", "tlfFileInfoCell");
      const bFile = cell5.createEl("button", { text: this.strFile, cls: "tlfFileInfoButton" });
      var iv = this;
      bFile.addEventListener("click", (e) => __async(this, null, function* () {
        app.openWithDefaultApp(iv.strFile);
      }));
    }
    const tlfTable = container.createEl("div", { cls: "tlfFileInfoTable" });
    if (this.plugin.settings.showModified) {
      const row2 = tlfTable.createEl("div", { cls: "tlfFileInfoRow" });
      const cell3 = row2.createEl("div", "tlfFileInfoCell");
      cell3.createEl("div", { text: "Modified On", cls: "tlfFileInfoLabel" });
      const cell4 = row2.createEl("div", "tlfFileInfoCell");
      cell4.createEl("div", { text: this.strModified, cls: "tlfFileInfoValue" });
      cell4.createEl("div", { text: this.strModifiedFromNow, cls: "tlfFileInfoValue" });
    }
    if (this.plugin.settings.showCreated) {
      const row1 = tlfTable.createEl("div", { cls: "tlfFileInfoRow" });
      const cell1 = row1.createEl("div", "tlfFileInfoCell");
      cell1.createEl("div", { text: "Created On", cls: "tlfFileInfoLabel" });
      const cell2 = row1.createEl("div", "tlfFileInfoCell");
      cell2.createEl("div", { text: this.strCreated, cls: "tlfFileInfoValue" });
      cell2.createEl("div", {
        text: this.strCreatedFromNow,
        cls: "tlfFileInfoValue"
      });
    }
    if (this.plugin.settings.showSize) {
      const row4 = tlfTable.createEl("div", { cls: "tlfFileInfoRow" });
      const cell7 = row4.createEl("div", "tlfFileInfoCell");
      cell7.createEl("div", { text: "Size", cls: "tlfFileInfoLabel" });
      const cell8 = row4.createEl("div", "tlfFileInfoCell");
      cell8.createEl("div", { text: this.strSize, cls: "tlfFileInfoValue" });
    }
    if (this.plugin.settings.showFolder) {
      const tlfTable3 = container.createEl("div", { cls: "tlfFileInfoTable" });
      const row6 = tlfTable3.createEl("div", { cls: "tlfFileInfoRow" });
      const cell6 = row6.createEl("div", "tlfFileInfoCell");
      const bFolder = cell6.createEl("button", { text: this.strFolder, cls: "tlfFileInfoButton" });
      var iv = this;
      bFolder.addEventListener("click", (e) => __async(this, null, function* () {
        app.showInFolder(iv.strFile);
      }));
    }
    if (!this.isText) {
      return;
    }
    if (this.plugin.settings.showCurrentWords || this.plugin.settings.showCurrentCharacters || this.plugin.settings.showCurrentSentences || this.plugin.settings.showCurrentPages || this.plugin.settings.showCurrentParagraphs) {
      const tlfTable4 = container.createEl("div", { cls: "tlfFileInfoTable" });
      if (this.plugin.settings.showCurrentCharacters) {
        const row7 = tlfTable4.createEl("div", { cls: "tlfFileInfoRow" });
        const cell11 = row7.createEl("div", "tlfFileInfoCell");
        cell11.createEl("div", { text: "Characters", cls: "tlfFileInfoLabel" });
        const cell12 = row7.createEl("div", "tlfFileInfoCell");
        cell12.createEl("div", { text: "" + this.numCharacters + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showCurrentWords) {
        const row6 = tlfTable4.createEl("div", { cls: "tlfFileInfoRow" });
        const cell9 = row6.createEl("div", "tlfFileInfoCell");
        cell9.createEl("div", { text: "Words", cls: "tlfFileInfoLabel" });
        const cell10 = row6.createEl("div", "tlfFileInfoCell");
        cell10.createEl("div", { text: "" + this.numWords + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showCurrentSentences) {
        const row8 = tlfTable4.createEl("div", { cls: "tlfFileInfoRow" });
        const cell13 = row8.createEl("div", "tlfFileInfoCell");
        cell13.createEl("div", { text: "Sentences", cls: "tlfFileInfoLabel" });
        const cell14 = row8.createEl("div", "tlfFileInfoCell");
        cell14.createEl("div", { text: "" + this.numSentences + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showCurrentParagraphs) {
        const row16 = tlfTable4.createEl("div", { cls: "tlfFileInfoRow" });
        const cell26 = row16.createEl("div", "tlfFileInfoCell");
        cell26.createEl("div", { text: "Paragraphs", cls: "tlfFileInfoLabel" });
        const cell27 = row16.createEl("div", "tlfFileInfoCell");
        cell27.createEl("div", { text: "" + this.numParagraphs + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showCurrentPages) {
        const row12 = tlfTable4.createEl("div", { cls: "tlfFileInfoRow" });
        const cell21 = row12.createEl("div", "tlfFileInfoCell");
        cell21.createEl("div", { text: "Est. Pages", cls: "tlfFileInfoLabel" });
        var wordsPerPage = Number(this.plugin.settings.wordsPerPage);
        var currentWords = this.numWords;
        var estPages = 1;
        if (typeof wordsPerPage !== "number" || isNaN(wordsPerPage) || (typeof currentWords !== "number" || isNaN(currentWords))) {
          estPages = "Words Per Page Setting Is Not Valid";
        } else {
          if (wordsPerPage < 1) {
            wordsPerPage = 1;
          }
          ;
          estPages = this.numWords / wordsPerPage;
          estPages = estPages.toFixed(2);
        }
        const cell22 = row12.createEl("div", "tlfFileInfoCell");
        cell22.createEl("div", { text: "" + estPages + "", cls: "tlfFileInfoValueNumber" });
      }
    }
    if (this.plugin.settings.showWordFrequency) {
      var report = "";
      var reportRegex = "";
      if (this.arrCurrentWordFrequency.length > 0) {
        if (this.plugin.settings.filterFrequency && this.plugin.settings.filterRegex.length > 0) {
          const regex = this.plugin.settings.filterRegex;
          const pattern = new RegExp(regex);
          for (let i in this.arrCurrentWordFrequency) {
            var word = String(this.arrCurrentWordFrequency[i][0]);
            var find = word.match(pattern);
            if (find) {
              reportRegex += this.arrCurrentWordFrequency[i][1] + ", " + this.arrCurrentWordFrequency[i][0] + "\n";
            } else {
              report += this.arrCurrentWordFrequency[i][1] + ", " + this.arrCurrentWordFrequency[i][0] + "\n";
            }
          }
        } else {
          for (let i in this.arrCurrentWordFrequency) {
            report += this.arrCurrentWordFrequency[i][1] + ", " + this.arrCurrentWordFrequency[i][0] + "\n";
          }
        }
      }
      const tlfTable6 = container.createEl("div", { cls: "tlfFileInfoTable" });
      const row13 = tlfTable6.createEl("div", { cls: "tlfFileInfoRow" });
      const cell23 = row13.createEl("div", "tlfFileInfoCell");
      cell23.createEl("div", { text: "Word Frequency", cls: "tlfFileInfoLabel" });
      const row14 = tlfTable6.createEl("div", { cls: "tlfFileInfoRow" });
      const cell24 = row14.createEl("div", "tlfFileInfoCell");
      cell24.createEl("textarea", { text: report, cls: "tlfFileInfoTextArea" });
      if (this.plugin.settings.filterFrequency && this.plugin.settings.filterRegex.length > 0) {
        const row15 = tlfTable6.createEl("div", { cls: "tlfFileInfoRow" });
        const cell25 = row15.createEl("div", "tlfFileInfoCell");
        cell25.createEl("textarea", { text: reportRegex, cls: "tlfFileInfoTextArea" });
      }
    }
    if (this.plugin.settings.showSelectedWords || this.plugin.settings.showSelectedCharacters || this.plugin.settings.showSelectedSentences || this.plugin.settings.showSelectedParagraphs) {
      const tlfTable5 = container.createEl("div", { cls: "tlfFileInfoTable" });
      if (this.plugin.settings.showSelectedCharacters) {
        const row9 = tlfTable5.createEl("div", { cls: "tlfFileInfoRow" });
        const cell15 = row9.createEl("div", "tlfFileInfoCell");
        cell15.createEl("div", { text: "Selected Characters", cls: "tlfFileInfoLabel" });
        const cell16 = row9.createEl("div", "tlfFileInfoCell");
        cell16.createEl("div", { text: "" + this.numSelectedCharacters + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showSelectedWords) {
        const row10 = tlfTable5.createEl("div", { cls: "tlfFileInfoRow" });
        const cell17 = row10.createEl("div", "tlfFileInfoCell");
        cell17.createEl("div", { text: "Selected Words", cls: "tlfFileInfoLabel" });
        const cell18 = row10.createEl("div", "tlfFileInfoCell");
        cell18.createEl("div", { text: "" + this.numSelectedWords + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showSelectedSentences) {
        const row11 = tlfTable5.createEl("div", { cls: "tlfFileInfoRow" });
        const cell19 = row11.createEl("div", "tlfFileInfoCell");
        cell19.createEl("div", { text: "Selected Sentences", cls: "tlfFileInfoLabel" });
        const cell20 = row11.createEl("div", "tlfFileInfoCell");
        cell20.createEl("div", { text: "" + this.numSelectedSentences + "", cls: "tlfFileInfoValueNumber" });
      }
      if (this.plugin.settings.showSelectedParagraphs) {
        const row17 = tlfTable5.createEl("div", { cls: "tlfFileInfoRow" });
        const cell28 = row17.createEl("div", "tlfFileInfoCell");
        cell28.createEl("div", { text: "Selected Paragraphs", cls: "tlfFileInfoLabel" });
        const cell29 = row17.createEl("div", "tlfFileInfoCell");
        cell29.createEl("div", { text: "" + this.numSelectedParagraphs + "", cls: "tlfFileInfoValueNumber" });
      }
    }
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "File Info View";
  }
  onOpen() {
    return __async(this, null, function* () {
      this.updateDisplay();
    });
  }
  onClose() {
    return __async(this, null, function* () {
    });
  }
};

// tlfUtilities.ts
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0)
    return "0 Bytes";
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
}

// main.ts
var tlfFileInfo = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.processing = 0;
    this.intervalTimer = null;
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      var a = this.app;
      var p = this;
      this.registerView(VIEW_TYPE, (leaf) => new tlfItemView(leaf, a, p));
      const ribbonIcon = this.addRibbonIcon("info", "File Info Panel", (evt) => {
        this.toggleView();
      });
      this.addCommand({
        id: "form-info-show-window",
        name: "Show/Hide File Info Panel",
        callback: () => {
          this.toggleView();
        }
      });
      this.addSettingTab(new tlfPluginSettingTab(this.app, this));
      this.registerEvent(this.app.vault.on("create", () => {
        this.requeryStats();
      }));
      this.registerEvent(this.app.vault.on("rename", () => {
        this.requeryStats();
      }));
      this.registerEvent(this.app.vault.on("modify", () => {
        this.requeryStats();
      }));
      this.registerEvent(this.app.vault.on("delete", () => {
        this.requeryStats();
      }));
      this.registerEvent(this.app.vault.on("file-open", () => {
        this.requeryStats();
      }));
      this.registerEvent(this.app.workspace.on("active-leaf-change", () => {
        this.requeryStats();
      }));
    });
  }
  requeryStats() {
    return __async(this, null, function* () {
      var file = this.app.workspace.getActiveFile();
      this.app.workspace.getLeavesOfType(VIEW_TYPE).forEach((leaf) => __async(this, null, function* () {
        if (leaf.view instanceof tlfItemView) {
          if (this.processing)
            return;
          this.processing = 1;
          if (!file) {
            leaf.view.strCreated = "";
            leaf.view.strModified = "";
            leaf.view.strFile = "";
            leaf.view.strFolder = "";
            leaf.view.strSize = "";
            leaf.view.numWords = 0;
            leaf.view.numCharacters = 0;
            leaf.view.numSentences = 0;
            leaf.view.numParagraphs = 0;
            leaf.view.numSelectedWords = 0;
            leaf.view.numSelectedParagraphs = 0;
            leaf.view.numSelectedCharacters = 0;
            leaf.view.numSelectedSentences = 0;
            leaf.view.arrCurrentWordFrequency = [];
            leaf.view.isText = 0;
          } else {
            var currentWords = 0;
            var currentCharacters = 0;
            var currentSentences = 0;
            var currentParagraphs = 0;
            var selectedWords = 0;
            var selectedCharacters = 0;
            var selectedSentences = 0;
            var selectedParagraphs = 0;
            var currentWordFrequency = [];
            var isText = 0;
            if (file.extension === "md" || file.extension === "txt") {
              isText = 1;
              var data = "";
              data = yield file.vault.cachedRead(file);
              if (data) {
                if (this.settings.showCurrentWords) {
                  currentWords = getWordCount(data);
                }
                if (this.settings.showCurrentCharacters) {
                  currentCharacters = getCharacterCount(data);
                }
                if (this.settings.showCurrentSentences) {
                  currentSentences = getSentenceCount(data);
                }
                if (this.settings.showCurrentParagraphs) {
                  currentParagraphs = getParagraphCount(data);
                }
                if (this.settings.showWordFrequency) {
                  currentWordFrequency = getWordFrequencyArray(data);
                }
              }
              if (this.settings.showSelectedWords || this.settings.showSelectedCharacters || this.settings.showSelectedSentences || this.settings.showSelectedParagraphs) {
                if (!this.intervalTimer) {
                  this.intervalTimer = window.setInterval(() => {
                    this.requeryStats();
                  }, INTERVAL_MINUTES * 60 * 1e3);
                  this.registerInterval(this.interval);
                }
                var selectedData = "";
                const v = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
                if (v.file == file) {
                  if ("editor" in v) {
                    if (v.getMode() === "source") {
                      if (v.editor.somethingSelected()) {
                        selectedData = v.editor.getSelection();
                        if (this.settings.showSelectedWords) {
                          selectedWords = getWordCount(selectedData);
                        }
                        if (this.settings.showSelectedCharacters) {
                          selectedCharacters = getCharacterCount(selectedData);
                        }
                        if (this.settings.showSelectedSentences) {
                          selectedSentences = getSentenceCount(selectedData);
                        }
                        if (this.settings.showSelectedParagraphs) {
                          selectedParagraphs = getParagraphCount(selectedData);
                        }
                      }
                    }
                  }
                }
              } else {
                if (this.intervalTimer) {
                  window.clearInterval(this.intervalTimer);
                  this.intervalTimer = null;
                }
              }
            }
            var cDate = import_obsidian3.moment.unix(file.stat.ctime / 1e3);
            var cString = cDate.format("llll");
            var mDate = import_obsidian3.moment.unix(file.stat.mtime / 1e3);
            var mString = mDate.format("llll");
            leaf.view.isText = isText;
            leaf.view.strCreated = cString;
            leaf.view.strCreatedFromNow = cDate.fromNow();
            leaf.view.strModified = mString;
            leaf.view.strModifiedFromNow = mDate.fromNow();
            leaf.view.strFile = file.name;
            leaf.view.strFolder = file.vault.adapter.basePath;
            leaf.view.strFullPath = file.vault.adapter.basePath + file.vault.adapter.path.sep + file.name;
            leaf.view.strSize = formatBytes(file.stat.size, 1);
            leaf.view.numWords = currentWords;
            leaf.view.numCharacters = currentCharacters;
            leaf.view.numSentences = currentSentences;
            leaf.view.numParagraphs = currentParagraphs;
            leaf.view.numSelectedWords = selectedWords;
            leaf.view.numSelectedCharacters = selectedCharacters;
            leaf.view.numSelectedSentences = selectedSentences;
            leaf.view.numSelectedParagraphs = selectedParagraphs;
            leaf.view.arrCurrentWordFrequency = currentWordFrequency;
          }
          leaf.view.updateDisplay();
          this.processing = 0;
        }
      }));
    });
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE);
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, tlfDefaultSettings, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  deactivateView() {
    return __async(this, null, function* () {
      if (this.intervalTimer) {
        window.clearInterval(this.intervalTimer);
        this.intervalTimer = null;
      }
      this.app.workspace.detachLeavesOfType(VIEW_TYPE);
    });
  }
  toggleView() {
    return __async(this, null, function* () {
      var found = false;
      this.app.workspace.getLeavesOfType(VIEW_TYPE).forEach((leaf) => {
        if (leaf.view instanceof tlfItemView) {
          this.deactivateView();
          found = true;
        }
      });
      if (!found) {
        this.activateView();
      }
    });
  }
  activateView() {
    return __async(this, null, function* () {
      this.app.workspace.detachLeavesOfType(VIEW_TYPE);
      yield this.app.workspace.getRightLeaf(false).setViewState({
        type: VIEW_TYPE,
        active: true
      });
      this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]);
      this.requeryStats();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
